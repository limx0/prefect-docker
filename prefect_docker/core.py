from datetime import timedelta
from typing import Dict, List, Union, Tuple, Optional

from python_on_whales import docker, Image
from prefect import task
from python_on_whales.components.container.cli_wrapper import ValidPortMapping, ValidContainer, Container
from python_on_whales.components.image.cli_wrapper import ValidImage
from python_on_whales.components.network.cli_wrapper import ValidNetwork
from python_on_whales.components.volume.cli_wrapper import VolumeDefinition
from python_on_whales.utils import ValidPath
from python_on_whales.exceptions import NoSuchContainer


@task
def list_images(filters: Dict[str, str] = None) -> List[Image]:
    return docker.image.list(filters or {})


@task
def list_containers(all: bool = False, filters: Dict[str, str] = None) -> List[Container]:
    return docker.container.list(all=all, filters=filters or {})


@task
def pull_image(image: Union[str, List[str]], quiet: bool = False) -> Union[Image, List[Image]]:
    return docker.pull(x=image, quiet=quiet)


@task
def push_image(x: Union[str, List[str]], quiet: bool = False):
    return docker.image.push(x=x, quiet=quiet)


@task
def create_container(
    image: str,
    command: List[str] = None,
    *,
    add_hosts: List[Tuple[str, str]] = [],
    blkio_weight: Optional[int] = None,
    blkio_weight_device: List[str] = [],
    cap_add: List[str] = [],
    cap_drop: List[str] = [],
    cgroup_parent: Optional[str] = None,
    cidfile: Optional[ValidPath] = None,
    cpu_period: Optional[int] = None,
    cpu_quota: Optional[int] = None,
    cpu_rt_period: Optional[int] = None,
    cpu_rt_runtime: Optional[int] = None,
    cpu_shares: Optional[int] = None,
    cpus: Optional[float] = None,
    cpuset_cpus: Optional[List[int]] = None,
    cpuset_mems: Optional[List[int]] = None,
    detach: bool = False,
    devices: List[str] = [],
    device_cgroup_rules: List[str] = [],
    device_read_bps: List[str] = [],
    device_read_iops: List[str] = [],
    device_write_bps: List[str] = [],
    device_write_iops: List[str] = [],
    content_trust: bool = False,
    dns: List[str] = [],
    dns_options: List[str] = [],
    dns_search: List[str] = [],
    domainname: Optional[str] = None,
    entrypoint: Optional[str] = None,
    envs: Dict[str, str] = {},
    env_files: Union[ValidPath, List[ValidPath]] = [],
    expose: Union[int, List[int]] = [],
    gpus: Union[int, str, None] = None,
    groups_add: List[str] = [],
    healthcheck: bool = True,
    health_cmd: Optional[str] = None,
    health_interval: Union[None, int, timedelta] = None,
    health_retries: Optional[int] = None,
    health_start_period: Union[None, int, timedelta] = None,
    health_timeout: Union[None, int, timedelta] = None,
    hostname: Optional[str] = None,
    init: bool = False,
    ip: Optional[str] = None,
    ip6: Optional[str] = None,
    ipc: Optional[str] = None,
    isolation: Optional[str] = None,
    kernel_memory: Union[int, str, None] = None,
    labels: Dict[str, str] = {},
    label_files: List[ValidPath] = [],
    link: List[ValidContainer] = [],
    link_local_ip: List[str] = [],
    log_driver: Optional[str] = None,
    log_options: List[str] = [],
    mac_address: Optional[str] = None,
    memory: Union[int, str, None] = None,
    memory_reservation: Union[int, str, None] = None,
    memory_swap: Union[int, str, None] = None,
    memory_swappiness: Optional[int] = None,
    mounts: List[List[str]] = [],
    name: Optional[str] = None,
    networks: List[ValidNetwork] = [],
    network_aliases: List[str] = [],
    oom_kill: bool = True,
    oom_score_adj: Optional[int] = None,
    pid: Optional[str] = None,
    pids_limit: Optional[int] = None,
    platform: Optional[str] = None,
    privileged: bool = False,
    publish: List[ValidPortMapping] = [],
    publish_all: bool = False,
    read_only: bool = False,
    restart: Optional[str] = None,
    remove: bool = False,
    runtime: Optional[str] = None,
    security_options: List[str] = [],
    shm_size: Union[int, str, None] = None,
    sig_proxy: bool = True,
    stop_signal: Optional[str] = None,
    stop_timeout: Optional[int] = None,
    storage_options: List[str] = [],
    sysctl: Dict[str, str] = {},
    tmpfs: List[ValidPath] = [],
    ulimit: List[str] = [],
    user: Optional[str] = None,
    userns: Optional[str] = None,
    uts: Optional[str] = None,
    volumes: Optional[List[VolumeDefinition]] = [],
    volume_driver: Optional[str] = None,
    volumes_from: List[ValidContainer] = [],
    workdir: Optional[ValidPath] = None,
):
    assert isinstance(command, list), f"command should be list, not {type(command)}"
    return docker.container.create(
        image=image,
        command=command,
        add_hosts=add_hosts,
        blkio_weight=blkio_weight,
        blkio_weight_device=blkio_weight_device,
        cap_add=cap_add,
        cap_drop=cap_drop,
        cgroup_parent=cgroup_parent,
        cidfile=cidfile,
        cpu_period=cpu_period,
        cpu_quota=cpu_quota,
        cpu_rt_period=cpu_rt_period,
        cpu_rt_runtime=cpu_rt_runtime,
        cpu_shares=cpu_shares,
        cpus=cpus,
        cpuset_cpus=cpuset_cpus,
        cpuset_mems=cpuset_mems,
        detach=detach,
        devices=devices,
        device_cgroup_rules=device_cgroup_rules,
        device_read_bps=device_read_bps,
        device_read_iops=device_read_iops,
        device_write_bps=device_write_bps,
        device_write_iops=device_write_iops,
        content_trust=content_trust,
        dns=dns,
        dns_options=dns_options,
        dns_search=dns_search,
        domainname=domainname,
        entrypoint=entrypoint,
        envs=envs,
        env_files=env_files,
        expose=expose,
        gpus=gpus,
        groups_add=groups_add,
        healthcheck=healthcheck,
        health_cmd=health_cmd,
        health_interval=health_interval,
        health_retries=health_retries,
        health_start_period=health_start_period,
        health_timeout=health_timeout,
        hostname=hostname,
        init=init,
        ip=ip,
        ip6=ip6,
        ipc=ipc,
        isolation=isolation,
        kernel_memory=kernel_memory,
        labels=labels,
        label_files=label_files,
        link=link,
        link_local_ip=link_local_ip,
        log_driver=log_driver,
        log_options=log_options,
        mac_address=mac_address,
        memory=memory,
        memory_reservation=memory_reservation,
        memory_swap=memory_swap,
        memory_swappiness=memory_swappiness,
        mounts=mounts,
        name=name,
        networks=networks,
        network_aliases=network_aliases,
        oom_kill=oom_kill,
        oom_score_adj=oom_score_adj,
        pid=pid,
        pids_limit=pids_limit,
        platform=platform,
        privileged=privileged,
        publish=publish,
        publish_all=publish_all,
        read_only=read_only,
        restart=restart,
        remove=remove,
        runtime=runtime,
        security_options=security_options,
        shm_size=shm_size,
        sig_proxy=sig_proxy,
        stop_signal=stop_signal,
        stop_timeout=stop_timeout,
        storage_options=storage_options,
        sysctl=sysctl,
        tmpfs=tmpfs,
        ulimit=ulimit,
        user=user,
        userns=userns,
        uts=uts,
        volumes=volumes,
        volume_driver=volume_driver,
        volumes_from=volumes_from,
        workdir=workdir,
    )


@task
def stop_container(
    containers: Union[ValidContainer, List[ValidContainer]],
    time: Union[int, timedelta] = None,
    strict: bool = True,
):
    try:
        return docker.container.stop(containers=containers, time=time)
    except NoSuchContainer:
        if strict:
            raise


@task
def remove_container(
    containers: Union[Container, str, List[Union[Container, str]]],
    force: bool = False,
    volumes: bool = False,
    strict: bool = True,
):
    try:
        return docker.container.remove(containers=containers, force=force, volumes=volumes)
    except NoSuchContainer:
        if strict:
            raise


def run_container(
    image: ValidImage,
    command: List[str] = [],
    *,
    add_hosts: List[Tuple[str, str]] = [],
    blkio_weight: Optional[int] = None,
    blkio_weight_device: List[str] = [],
    cap_add: List[str] = [],
    cap_drop: List[str] = [],
    cgroup_parent: Optional[str] = None,
    cidfile: Optional[ValidPath] = None,
    cpu_period: Optional[int] = None,
    cpu_quota: Optional[int] = None,
    cpu_rt_period: Optional[int] = None,
    cpu_rt_runtime: Optional[int] = None,
    cpu_shares: Optional[int] = None,
    cpus: Optional[float] = None,
    cpuset_cpus: Optional[List[int]] = None,
    cpuset_mems: Optional[List[int]] = None,
    detach: bool = False,
    devices: List[str] = [],
    device_cgroup_rules: List[str] = [],
    device_read_bps: List[str] = [],
    device_read_iops: List[str] = [],
    device_write_bps: List[str] = [],
    device_write_iops: List[str] = [],
    content_trust: bool = False,
    dns: List[str] = [],
    dns_options: List[str] = [],
    dns_search: List[str] = [],
    domainname: Optional[str] = None,
    entrypoint: Optional[str] = None,
    envs: Dict[str, str] = {},
    env_files: Union[ValidPath, List[ValidPath]] = [],
    expose: Union[int, List[int]] = [],
    gpus: Union[int, str, None] = None,
    groups_add: List[str] = [],
    healthcheck: bool = True,
    health_cmd: Optional[str] = None,
    health_interval: Union[None, int, timedelta] = None,
    health_retries: Optional[int] = None,
    health_start_period: Union[None, int, timedelta] = None,
    health_timeout: Union[None, int, timedelta] = None,
    hostname: Optional[str] = None,
    init: bool = False,
    interactive: bool = False,
    ip: Optional[str] = None,
    ip6: Optional[str] = None,
    ipc: Optional[str] = None,
    isolation: Optional[str] = None,
    kernel_memory: Union[int, str, None] = None,
    labels: Dict[str, str] = {},
    label_files: List[ValidPath] = [],
    link: List[ValidContainer] = [],
    link_local_ip: List[str] = [],
    log_driver: Optional[str] = None,
    log_options: List[str] = [],
    mac_address: Optional[str] = None,
    memory: Union[int, str, None] = None,
    memory_reservation: Union[int, str, None] = None,
    memory_swap: Union[int, str, None] = None,
    memory_swappiness: Optional[int] = None,
    mounts: List[List[str]] = [],
    name: Optional[str] = None,
    networks: List[ValidNetwork] = [],
    network_aliases: List[str] = [],
    oom_kill: bool = True,
    oom_score_adj: Optional[int] = None,
    pid: Optional[str] = None,
    pids_limit: Optional[int] = None,
    platform: Optional[str] = None,
    privileged: bool = False,
    publish: List[ValidPortMapping] = [],
    publish_all: bool = False,
    read_only: bool = False,
    restart: Optional[str] = None,
    remove: bool = False,
    runtime: Optional[str] = None,
    security_options: List[str] = [],
    shm_size: Union[int, str, None] = None,
    sig_proxy: bool = True,
    stop_signal: Optional[str] = None,
    stop_timeout: Optional[int] = None,
    storage_options: List[str] = [],
    stream: bool = False,
    sysctl: Dict[str, str] = {},
    tmpfs: List[ValidPath] = [],
    tty: bool = False,
    ulimit: List[str] = [],
    user: Optional[str] = None,
    userns: Optional[str] = None,
    uts: Optional[str] = None,
    volumes: Optional[List[VolumeDefinition]] = [],
    volume_driver: Optional[str] = None,
    volumes_from: List[ValidContainer] = [],
    workdir: Optional[ValidPath] = None,
):
    return docker.container.run(
        image=image,
        command=command,
        add_hosts=add_hosts,
        blkio_weight=blkio_weight,
        blkio_weight_device=blkio_weight_device,
        cap_add=cap_add,
        cap_drop=cap_drop,
        cgroup_parent=cgroup_parent,
        cidfile=cidfile,
        cpu_period=cpu_period,
        cpu_quota=cpu_quota,
        cpu_rt_period=cpu_rt_period,
        cpu_rt_runtime=cpu_rt_runtime,
        cpu_shares=cpu_shares,
        cpus=cpus,
        cpuset_cpus=cpuset_cpus,
        cpuset_mems=cpuset_mems,
        detach=detach,
        devices=devices,
        device_cgroup_rules=device_cgroup_rules,
        device_read_bps=device_read_bps,
        device_read_iops=device_read_iops,
        device_write_bps=device_write_bps,
        device_write_iops=device_write_iops,
        content_trust=content_trust,
        dns=dns,
        dns_options=dns_options,
        dns_search=dns_search,
        domainname=domainname,
        entrypoint=entrypoint,
        envs=envs,
        env_files=env_files,
        expose=expose,
        gpus=gpus,
        groups_add=groups_add,
        healthcheck=healthcheck,
        health_cmd=health_cmd,
        health_interval=health_interval,
        health_retries=health_retries,
        health_start_period=health_start_period,
        health_timeout=health_timeout,
        hostname=hostname,
        init=init,
        interactive=interactive,
        ip=ip,
        ip6=ip6,
        ipc=ipc,
        isolation=isolation,
        kernel_memory=kernel_memory,
        labels=labels,
        label_files=label_files,
        link=link,
        link_local_ip=link_local_ip,
        log_driver=log_driver,
        log_options=log_options,
        mac_address=mac_address,
        memory=memory,
        memory_reservation=memory_reservation,
        memory_swap=memory_swap,
        memory_swappiness=memory_swappiness,
        mounts=mounts,
        name=name,
        networks=networks,
        network_aliases=network_aliases,
        oom_kill=oom_kill,
        oom_score_adj=oom_score_adj,
        pid=pid,
        pids_limit=pids_limit,
        platform=platform,
        privileged=privileged,
        publish=publish,
        publish_all=publish_all,
        read_only=read_only,
        restart=restart,
        remove=remove,
        runtime=runtime,
        security_options=security_options,
        shm_size=shm_size,
        sig_proxy=sig_proxy,
        stop_signal=stop_signal,
        stop_timeout=stop_timeout,
        storage_options=storage_options,
        stream=stream,
        sysctl=sysctl,
        tmpfs=tmpfs,
        tty=tty,
        ulimit=ulimit,
        user=user,
        userns=userns,
        uts=uts,
        volumes=volumes,
        volume_driver=volume_driver,
        volumes_from=volumes_from,
        workdir=workdir,
    )


@task
def start_container(
    containers: Union[ValidContainer, List[ValidContainer]],
    attach: bool = False,
    stream: bool = False,
):
    return docker.container.start(
        containers=containers,
        attach=attach,
        stream=stream,
    )


__all__ = [
    "list_images",
    "list_containers",
    "pull_image",
    "push_image",
    "create_container",
    "run_container",
    "remove_container",
    "start_container",
    "stop_container",
]
